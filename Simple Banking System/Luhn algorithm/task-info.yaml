type: edu
custom_name: stage2
files:
- name: src/banking/Main.java
  visible: true
  text: |-
    package banking;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/SimpleBankSystemTest.java
  visible: false
  text: |-
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.hyperskill.hstest.dynamic.DynamicTest;

    import java.util.Random;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class SimpleBankSystemTest extends StageTest<String> {

        private static final Pattern cardNumberPattern = Pattern.compile("^400000\\d{10}$", Pattern.MULTILINE);
        private static final Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);

        @DynamicTest
        CheckResult test1_checkCardCredentials() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return CheckResult.wrong("You are printing the card number " +
                    "incorrectly. The card number should look like in the example: " +
                    "400000DDDDDDDDDD, where D is a digit.");
            }

            Matcher pinMatcher = pinPattern.matcher(output);

            if (!pinMatcher.find()) {
                return CheckResult.wrong("You are printing the card PIN " +
                    "incorrectly. The PIN should look like in the example: DDDD, where D is " +
                    "a digit.");
            }

            String correctCardNumber = cardNumberMatcher.group();

            output = program.execute("1");
            cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return CheckResult.wrong("You are printing the card number " +
                    "incorrectly. The card number should look like in the example: " +
                    "400000DDDDDDDDDD, where D is a digit.");
            }

            pinMatcher = pinPattern.matcher(output);

            if (!pinMatcher.find()) {
                return CheckResult.wrong("You are printing the card PIN " +
                    "incorrectly. The PIN should look like in the example: DDDD, where D is " +
                    "a digit.");
            }

            String anotherCardNumber = cardNumberMatcher.group();

            if (anotherCardNumber.equals(correctCardNumber)) {
                return CheckResult.wrong("Your program generates two identical card numbers!");
            }

            program.execute("0");

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test2_checkLogInAndLogOut() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return new CheckResult(false, "You are printing the card number " +
                    "incorrectly. The card number should look like in the example: " +
                    "400000DDDDDDDDDD, where D is a digit.");
            }

            Matcher pinMatcher = pinPattern.matcher(output);

            if (!pinMatcher.find()) {
                return new CheckResult(false, "You are printing the card PIN " +
                    "incorrectly. The PIN should look like in the example: DDDD, where D is " +
                    "a digit.");
            }
            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + correctPin);

            if (!output.toLowerCase().contains("successfully")) {
                return new CheckResult(false, "The user should be signed in after " +
                    "entering the correct card information.");
            }

            output = program.execute("2");

            if (!output.toLowerCase().contains("create")) {
                return new CheckResult(false, "The user should be logged out after choosing 'Log out' option.\n" +
                    "And you should print the menu with 'Create an account' option.");
            }

            program.execute("0");

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test3_checkLogInWithWrongPin() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example!");
            }

            String correctCardNumber = cardNumberMatcher.group();
            String correctPin = pinMatcher.group();

            Random random = new Random();

            String incorrectPin = correctPin;

            while (correctPin.equals(incorrectPin)) {
                incorrectPin = String.valueOf(1000 + random.nextInt(8999));
            }

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + incorrectPin);

            if (output.toLowerCase().contains("successfully")) {
                return new CheckResult(false, "The user should not be signed in after" +
                    " entering incorrect card information.");
            }

            program.execute("0");

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test4_checkLogInToNotExistingAccount() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number " +
                    "and PIN like in example");
            }

            String correctCardNumber = cardNumberMatcher.group();

            Random random = new Random();

            String correctPin = pinMatcher.group().trim();
            String incorrectCardNumber = correctCardNumber;

            while (correctCardNumber.equals(incorrectCardNumber)) {
                incorrectCardNumber = "400000" + (1_000_000_00 + random.nextInt(8_000_000_00));
            }

            program.execute("2");
            output = program.execute(incorrectCardNumber + "\n" + correctPin);

            if (output.toLowerCase().contains("successfully")) {
                return new CheckResult(false, "The user should not be signed" +
                    " in after entering the information of a non-existing card.");
            }

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test5_checkBalance() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);
            output = program.execute("1");

            if (!output.contains("0")) {
                return new CheckResult(false, "Expected balance: 0");
            }

            program.execute("0");

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test6_checkLuhnAlgorithm() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            boolean isSomeCardFound = false;
            int foundCards = 0;

            while (cardNumberMatcher.find()) {

                foundCards++;

                if (!isSomeCardFound) {
                    isSomeCardFound = true;
                }

                String cardNumber = cardNumberMatcher.group();

                if (!checkLuhnAlgorithm(cardNumber)) {
                    return new CheckResult(false, String.format("The card number %s doesnâ€™t pass the Luhn algorithm.", cardNumber));
                }
            }

            if (!isSomeCardFound) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            if (foundCards != 20) {
                return new CheckResult(false, "Tried to generate 20 cards, but found " + foundCards);
            }

            return CheckResult.correct();
        }

        private boolean checkLuhnAlgorithm(String cardNumber) {
            int result = 0;
            for (int i = 0; i < cardNumber.length(); i++) {
                int digit = Character.getNumericValue(cardNumber.charAt(i));
                if (i % 2 == 0) {
                    int doubleDigit = digit * 2 > 9 ? digit * 2 - 9 : digit * 2;
                    result += doubleDigit;
                    continue;
                }
                result += digit;
            }
            return result % 10 == 0;
        }
    }
  learner_created: false
- name: src/banking/Account.java
  visible: true
  text: |
    package banking;

    public class Account {
        private final int majorIndustryIdentifier;
        private final int bankIdentificationNumber;
        private final int accountID;
        private final int checksum;
        private final String cardNumber;

        private double balance;
        private int PIN;

        public Account(int bankIdentificationNumber, int accountID, double balance) {
            this.majorIndustryIdentifier = Character.getNumericValue(String.valueOf(bankIdentificationNumber).indexOf(0));
            this.bankIdentificationNumber = bankIdentificationNumber;
            this.accountID = accountID;
            this.checksum = 0;
            this.balance = balance;
            cardNumber = cardNumberToString();
        }

        public Account(int bankIdentificationNumber, int accountID) {
            this.majorIndustryIdentifier = Character.getNumericValue(String.valueOf(bankIdentificationNumber).indexOf(0));
            this.bankIdentificationNumber = bankIdentificationNumber;
            this.accountID = accountID;
            this.checksum = 0;
            this.balance = 0;
            cardNumber = cardNumberToString();
        }

        private String cardNumberToString() {
            final int CARD_NUMBER_LENGTH = 16;
            StringBuilder cardNumber = new StringBuilder();
            cardNumber.append(bankIdentificationNumber).append(accountID).append(checksum);
            if (cardNumber.length() < CARD_NUMBER_LENGTH) {
                while (cardNumber.length() < CARD_NUMBER_LENGTH) {
                    //insert zeroes into front of accountID to space and format correctly
                    cardNumber.insert(6, 0);
                }
            }
            return cardNumber.toString();
        }

        public int getMajorIndustryIdentifier() {
            return majorIndustryIdentifier;
        }

        public int getBankIdentificationNumber() {
            return bankIdentificationNumber;
        }

        public int getAccountID() {
            return accountID;
        }

        public int getChecksum() {
            return checksum;
        }

        public double getBalance() {
            return balance;
        }

        public void setBalance(double balance) {
            this.balance = balance;
        }

        public void setPIN(int PIN) {
            this.PIN = PIN;
        }

        public int getPIN() {
            return PIN;
        }

        public String getCardNumber() {
            return cardNumber;
        }
    }
  learner_created: true
- name: src/banking/ChecksumCalculator.java
  visible: true
  text: |
    package banking;

    public class ChecksumCalculator {

        public int generateCheckSum() {

            return 0;
        }

        public int validateCheckSum(String cardNumber) {
            // last digit is not needed to calculate sum
            int[] digits = new int[cardNumber.length() - 1];
            int checkSum = Integer.parseInt(String.valueOf(cardNumber.charAt(cardNumber.length() - 1)));
            int total = 0;

            //transform string into integer array
            for (int i = 0; i < digits.length; i++) {
                digits[i] = Integer.parseInt(String.valueOf(cardNumber.charAt(i)));
            }

            //odd numbers
            for (int i = 0; i < digits.length; i += 2) {
                digits[i] *= 2;
                if (digits[i] > 9) {
                    digits[i] -= 9;
                }
                total += digits[i];
            }

            return 0;
        }
    }
  learner_created: true
- name: src/banking/BankProgram.java
  visible: true
  text: |
    package banking;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.Random;
    import java.util.Scanner;

    public class BankProgram {
        private final Scanner scanner;
        private final List<Account> accountList;
        private final int bankIdentificationNumber;

        BankProgram() {
            accountList = new ArrayList<>();
            scanner = new Scanner(System.in);
            bankIdentificationNumber = 400000;
        }

        public void mainMenu() {
            String userChoice = "";
            while (!userChoice.equals("0")) {
                printMainMenu();
                userChoice = scanner.nextLine().trim();
                switch (userChoice) {
                    case "1":
                        Account currentAccount = createAccount();
                        cardCreationMessage(currentAccount);
                        accountList.add(currentAccount);
                        break;
                    case "2":
                        getLogInCredentials();
                        break;
                    case "0":
                        System.out.print("\nBye!");
                        break;
                    default:
                        System.out.println("Invalid Choice");
                }
            }
            scanner.close();
        }

        private void printMainMenu() {
            System.out.println("1. Create an account\n" +
                               "2. Log into account\n" +
                               "0. Exit");
        }

        private void printAccountManagementMenu() {
            System.out.println("1. Balance\n" +
                               "2. Log out\n" +
                               "0. Exit");
        }

        private Account createAccount() {
            int accountID = new Random().nextInt(1000000000);
            Account newAccount = new Account(bankIdentificationNumber, accountID);
            newAccount.setPIN(new Random().nextInt(10000));

            return newAccount;
        }

        private void cardCreationMessage(Account account) {
            System.out.println();
            System.out.println("Your card has been created");
            System.out.println("Your card number:");
            System.out.println(account.getCardNumber());
            System.out.println("Your card PIN:");
            System.out.println(account.getPIN());
            System.out.println();
        }

        private void getLogInCredentials() {
            String cardNumber;
            int PIN;

            System.out.println("Enter your card number:");
            cardNumber = scanner.nextLine();
            System.out.println("Enter your PIN:");
            PIN = Integer.parseInt(scanner.nextLine());
            System.out.println();

            logInAccount(cardNumber, PIN);
        }

        private void logInAccount(String cardNumber, int PIN) {
            Account currentAccount = null;

            for (Account account : accountList) {
                if (account.getCardNumber().equals(cardNumber)) {
                    if (account.getPIN() == PIN) {
                        currentAccount = account;
                        break;
                    }
                }
            }

            if (currentAccount != null) {
                System.out.println("You have successfully logged in!\n");
                accountManagement(currentAccount);
            } else {
                System.out.println("Wrong card number or PIN!\n");
            }
        }

        private void accountManagement(Account currentAccount) {
            while (true) {
                printAccountManagementMenu();
                String userChoice = scanner.nextLine();
                switch (userChoice) {
                    case "1":
                        String balanceFormatted = String.format("%.2f", currentAccount.getBalance());
                        System.out.println("\nBalance: " + balanceFormatted + "\n");
                        break;
                    case "2":
                        System.out.println("\nYou have successfully logged out!\n");
                        return;
                    case "0":
                        System.out.print("\nBye!");
                        System.exit(0);
                    default:
                        System.out.println("Invalid Selection");
                }
            }
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/8426#comment
status: Solved
feedback:
  message: Congratulations!
  time: Thu, 19 May 2022 23:28:57 UTC
record: 2
