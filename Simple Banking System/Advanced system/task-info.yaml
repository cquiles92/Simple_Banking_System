type: edu
custom_name: stage4
files:
- name: src/banking/Main.java
  visible: true
  text: |-
    package banking;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/SimpleBankSystemTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.junit.AfterClass;
    import org.junit.BeforeClass;

    import java.io.File;
    import java.io.IOException;
    import java.nio.file.Files;
    import java.nio.file.Path;
    import java.nio.file.Paths;
    import java.sql.*;
    import java.util.HashMap;
    import java.util.Map;
    import java.util.Random;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class SimpleBankSystemTest extends StageTest<String> {

        private static final String databaseFileName = "card.s3db";
        private static final String tempDatabaseFileName = "tempDatabase.s3db";
        private static final String[] args = {"-fileName", databaseFileName};
        private static final Map<String, String> correctData = new HashMap<>();

        private static final Pattern cardNumberPattern = Pattern.compile("^400000\\d{10}$", Pattern.MULTILINE);
        private static final Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);

        private static Connection connection;


        @DynamicTest
        CheckResult test1_checkDatabaseFile() {
            try {
                Files.deleteIfExists(Paths.get(tempDatabaseFileName));
                Files.deleteIfExists(Paths.get(databaseFileName));
            } catch (Exception ignored) {
            }

            TestedProgram program = new TestedProgram();
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            File file = new File(databaseFileName);

            if (!file.exists()) {
                return CheckResult.wrong("You should create a database file " +
                    "named " + databaseFileName + ". The file name should be taken from the command line arguments.\n" +
                    "The database file shouldn't be deleted after stopping the program!");
            }

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test2_checkConnection() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            getConnection();
            closeConnection();

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test3_checkIfTableExists() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            try {
                ResultSet resultSet = getConnection().createStatement().executeQuery(
                    "SELECT name FROM sqlite_master WHERE type ='table' AND name NOT LIKE 'sqlite_%';");
                while (resultSet.next()) {
                    if (resultSet.getString("name").equals("card")) {
                        closeConnection();
                        return CheckResult.correct();
                    }
                }
            } catch (SQLException e) {
                closeConnection();
                return CheckResult.wrong("Can't execute a query in your database! Make sure that your database isn't broken and you close your connection at the end of the program!");
            }

            closeConnection();
            return CheckResult.wrong("Your database doesn't have a table named 'card'");
        }

        @DynamicTest
        CheckResult test4_checkColumns() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            try {

                ResultSet resultSet = getConnection().createStatement().executeQuery("PRAGMA table_info(card);");
                Map<String, String> columns = new HashMap<>();

                while (resultSet.next()) {
                    columns.put(resultSet.getString("name").toLowerCase(), resultSet.getString("type").toUpperCase());
                }

                String[][] correctColumns = {
                    {"id", "INTEGER", "INT"},
                    {"number", "TEXT", "VARCHAR"},
                    {"pin", "TEXT", "VARCHAR"},
                    {"balance", "INTEGER", "INT"}};

                for (String[] correctColumn : correctColumns) {
                    String errorMessage = "Can't find '" + correctColumn[0] + "' column with '" + correctColumn[1] + "' type.\n" +
                        "Your table should have columns described in " +
                        "the stage instructions.";
                    if (!columns.containsKey(correctColumn[0])) {
                        return CheckResult.wrong(errorMessage);
                    } else if (!columns.get(correctColumn[0]).contains(correctColumn[1]) && !columns.get(correctColumn[0]).contains(correctColumn[2])) {
                        return CheckResult.wrong(errorMessage);
                    }
                }
            } catch (SQLException e) {
                return CheckResult.wrong("Can't connect to the database!");
            }

            closeConnection();
            return CheckResult.correct();
        }


        @DynamicTest
        CheckResult test5_checkAddingRowsToTheTable() {

            deleteAllRows();

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            stopAndCheckIfUserProgramWasStopped(program);

            try {

                ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM card");
                Map<String, String> userData = new HashMap<>();

                while (resultSet.next()) {
                    System.out.println(resultSet.getString("number"));
                    if (resultSet.getString("number") == null) {
                        return CheckResult.wrong("The card number shouldn't be null in the database!");
                    }
                    if (resultSet.getInt("balance") != 0) {
                        return CheckResult.wrong("Default balance value should be 0 in the database!");
                    }
                    if (resultSet.getString("pin") == null) {
                        return CheckResult.wrong("The PIN shouldn't be null in the database!");
                    }
                    userData.put(resultSet.getString("number"), resultSet.getString("pin"));
                }

                for (Map.Entry<String, String> entry : correctData.entrySet()) {
                    if (!userData.containsKey(entry.getKey())) {
                        return CheckResult.wrong("Your database doesn't save newly created cards.");
                    } else if (!userData.get(entry.getKey()).equals(entry.getValue())) {
                        return CheckResult.wrong("Correct PIN for card number " + entry.getKey() + " should " +
                            "be " + entry.getValue());
                    }
                }


            } catch (SQLException e) {
                return CheckResult.wrong("Can't connect the database!");
            }

            closeConnection();
            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test6_checkLogIn() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return CheckResult.wrong("You are printing the card number " +
                    "incorrectly. The card number should look like in the example:" +
                    " 400000DDDDDDDDDD, where D is a digit.");
            }

            Matcher pinMatcher = pinPattern.matcher(output);

            if (!pinMatcher.find()) {
                return CheckResult.wrong("You are printing the card PIN " +
                    "incorrectly. The PIN should look like in the example: DDDD, where D is a digit.");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + correctPin);

            if (!output.toLowerCase().contains("successfully")) {
                return CheckResult.wrong("The user should be signed in after" +
                    " entering the correct card information.");
            }

            stopAndCheckIfUserProgramWasStopped(program);

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test7_checkLogInWithWrongPin() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return CheckResult.wrong("You should output card number and PIN like in example");
            }

            String correctCardNumber = cardNumberMatcher.group();
            String correctPin = pinMatcher.group();

            Random random = new Random();

            String incorrectPin = correctPin;

            while (correctPin.equals(incorrectPin)) {
                incorrectPin = String.valueOf(1000 + random.nextInt(8999));
            }

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + incorrectPin);

            if (output.toLowerCase().contains("successfully")) {
                return CheckResult.wrong("The user should not be signed in" +
                    " after entering incorrect card information.");
            }

            stopAndCheckIfUserProgramWasStopped(program);
            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test8_checkLogInToNotExistingAccount() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return CheckResult.wrong("You should output card number and PIN like in example");
            }

            String correctCardNumber = cardNumberMatcher.group();
            String correctPin = pinMatcher.group();

            Random random = new Random();

            String incorrectCardNumber = correctCardNumber;

            while (correctCardNumber.equals(incorrectCardNumber)) {
                incorrectCardNumber = "400000" + (1_000_000_00 + random.nextInt(8_000_000_00));
            }

            program.execute("2");
            output = program.execute(incorrectCardNumber + "\n" + correctPin);

            if (output.toLowerCase().contains("successfully")) {
                return CheckResult.wrong("The user should not be signed in" +
                    " after entering incorrect card information.");
            }

            stopAndCheckIfUserProgramWasStopped(program);
            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test9_checkBalance() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return CheckResult.wrong("You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);

            output = program.execute("1");

            if (!output.contains("0")) {
                return CheckResult.wrong("Expected balance: 0");
            }

            stopAndCheckIfUserProgramWasStopped(program);
            return CheckResult.correct();
        }

        // ttest is not a typo!
        @DynamicTest
        CheckResult ttest10_checkAddIncome() {

            deleteAllRows();

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);
            program.execute("2\n10000");
            stopAndCheckIfUserProgramWasStopped(program);

            int userBalance = getBalance(correctCardNumber);
            if (userBalance != 10000) {
                return CheckResult.wrong("Account balance int the database is wrong after adding income.\nExpected 10000");
            }

            program = new TestedProgram();
            program.start(args);

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);
            program.execute("2\n15000");
            stopAndCheckIfUserProgramWasStopped(program);

            userBalance = getBalance(correctCardNumber);
            if (userBalance != 25000) {
                return CheckResult.wrong("Account balance is wrong after adding income.\nExpected 25000");
            }

            return CheckResult.correct();
        }

        // ttest is not a typo!
        @DynamicTest
        CheckResult ttest11_checkTransfer() {

            String incorrectCardNumber = "2000007269641764"; //Doesn't pass Luhn algorithm
            String notExistingCardNumber = "2000007269641768";

            deleteAllRows();

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return new CheckResult(false, "Your program outputs card number " +
                    "wrong.\nCard number should look like 400000DDDDDDDDDD. Where D is some digit");
            }

            String toTransferCardNumber = cardNumberMatcher.group();

            output = program.execute("1");

            cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);
            output = program.execute("3\n" + incorrectCardNumber);

            if (!output.contains("mistake")) {
                return new CheckResult(false, "You should not allow to transfer " +
                    "to a card number that doesn't pass the Luhn algorithm.\n You should print " +
                    "'Probably you made mistake in the card number. Please try again!'");
            }

            output = program.execute("3\n" + notExistingCardNumber);

            if (!output.contains("exist")) {
                return new CheckResult(false, "You should not allow to transfer " +
                    "to a card number that does not exist.\nYou should print " +
                    "'Such a card does not exist.'");
            }

            output = program.execute("3\n" + toTransferCardNumber + "\n100000");
            if (!output.toLowerCase().contains("not enough money")) {
                return new CheckResult(false, "You should not allow a transfer if " +
                    "there is not enough money in the account to complete it. You should print " +
                    "'Not enough money!'");
            }

            program.execute("2\n20000\n3\n" + toTransferCardNumber + "\n10000");

            stopAndCheckIfUserProgramWasStopped(program);

            int correctBalanceForBothAccounts = 10000;
            int toTransferCardBalance = getBalance(toTransferCardNumber);
            int correctCardNumberBalance = getBalance(correctCardNumber);

            if (toTransferCardBalance != correctBalanceForBothAccounts) {
                return new CheckResult(false, "Incorrect account balance of the card to which the transfer was made.");
            }

            if (correctCardNumberBalance != correctBalanceForBothAccounts) {
                return new CheckResult(false, "Incorrect account balance of the card used to make the transfer.");
            }

            return CheckResult.correct();
        }

        // ttest is not a typo!
        @DynamicTest
        CheckResult ttest12_checkTransfer() {

            deleteAllRows();

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2\n" + correctCardNumber + "\n" + correctPin + "\n4");

            stopAndCheckIfUserProgramWasStopped(program);

            try {
                PreparedStatement statement = getConnection().prepareStatement("SELECT * FROM card where number = ?");
                statement.setString(1, correctCardNumber);
                ResultSet resultSet = statement.executeQuery();
                if (resultSet.next()) {
                    return new CheckResult(false, "After closing the account, the card should be deleted " +
                        "from the database.");
                }
            } catch (SQLException e) {
                throw new WrongAnswer("Can't execute a query in your database! Make sure that your database isn't broken and you close your connection at the end of the program!");
            }

            closeConnection();
            return CheckResult.correct();
        }

        private static Connection getConnection() {
            if (connection == null) {
                try {
                    connection = DriverManager.getConnection("jdbc:sqlite:" + databaseFileName);
                } catch (SQLException exception) {
                    throw new WrongAnswer("Can't connect to the database! Make sure you close your database" +
                        " connection at the end of the program!");
                }
            }
            return connection;
        }

        private static void closeConnection() {
            if (connection == null)
                return;
            try {
                connection.close();
            } catch (SQLException ignored) {
            }
            connection = null;
        }

        //@BeforeClass
        public static void createTempDatabase() {

            closeConnection();

            Path userDbFile = Paths.get(databaseFileName);
            Path tempDbFile = Paths.get(tempDatabaseFileName);

            if (!userDbFile.toFile().exists())
                return;

            try {
                Files.deleteIfExists(tempDbFile);
                Files.copy(userDbFile, tempDbFile);
            } catch (Exception ignored) {
            }
        }

        //@AfterClass
        public static void deleteTempDatabase() {

            closeConnection();

            Path userDbFile = Paths.get(databaseFileName);
            Path tempDbFile = Paths.get(tempDatabaseFileName);

            if (!tempDbFile.toFile().exists())
                return;

            try {
                Files.deleteIfExists(userDbFile);
                Files.move(tempDbFile, userDbFile);
            } catch (Exception ignored) {
            }
        }

        private boolean getData(String out) {

            Pattern cardNumberPattern = Pattern.compile("400000\\d{10}");
            Matcher cardNumberMatcher = cardNumberPattern.matcher(out);

            Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);
            Matcher pinMatcher = pinPattern.matcher(out);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return false;
            }

            String number = cardNumberMatcher.group();
            String PIN = pinMatcher.group();

            if (!checkLuhnAlgorithm(number)) {
                return false;
            }

            correctData.put(number, PIN);

            return true;
        }

        private boolean checkLuhnAlgorithm(String cardNumber) {
            int result = 0;
            for (int i = 0; i < cardNumber.length(); i++) {
                int digit = Character.getNumericValue(cardNumber.charAt(i));
                if (i % 2 == 0) {
                    int doubleDigit = digit * 2 > 9 ? digit * 2 - 9 : digit * 2;
                    result += doubleDigit;
                    continue;
                }
                result += digit;
            }
            return result % 10 == 0;
        }

        private void deleteAllRows() {
            try {
                getConnection().createStatement().execute("DELETE FROM card");
                closeConnection();
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute a query in your database! Make sure that your database isn't broken and you close your connection at the end of the program!");
            }
        }

        private void stopAndCheckIfUserProgramWasStopped(TestedProgram program) {
            program.execute("0");
            if (!program.isFinished()) {
                throw new WrongAnswer("After choosing 'Exit' item you should stop your program" +
                    " and close database connection!");
            }
        }

        private static int getBalance(String cardNumber) {
            try {
                PreparedStatement preparedStatement = getConnection().prepareStatement("SELECT * FROM card WHERE number = ?");
                preparedStatement.setString(1, cardNumber);
                ResultSet resultSet = preparedStatement.executeQuery();
                resultSet.next();
                int result = resultSet.getInt("balance");
                closeConnection();
                return result;
            } catch (SQLException e) {
                throw new WrongAnswer("Can't execute a query in your database! Make sure that your database isn't broken and you close your connection at the end of the program!");
            }
        }
    }
  learner_created: false
- name: src/banking/DataBaseManager.java
  visible: true
  text: |
    package banking;

    import org.sqlite.SQLiteDataSource;

    import java.sql.*;

    public class DataBaseManager {
        private final SQLiteDataSource dataSource;

        DataBaseManager(String url) {
            dataSource = new SQLiteDataSource();
            dataSource.setUrl(url);
            createTable();
        }

        private void createTable() {
            try (Connection connection = dataSource.getConnection()) {
                try (Statement statement = connection.createStatement()) {
                    String sql = "CREATE TABLE IF NOT EXISTS card (\n"
                                 + "     id INTEGER PRIMARY KEY,\n"
                                 + "     number TEXT,\n"
                                 + "     pin TEXT,\n"
                                 + "     balance INTEGER DEFAULT 0"
                                 + ");";
                    statement.execute(sql);
                } catch (SQLException e) {
                    System.out.println("ERROR: Could not execute Create Table Statement");
                }
            } catch (SQLException e) {
                System.out.println("ERROR: Could not create establish a connection to DB");
            }
        }

        public void insertAccount(Account account) {
            String cardNumber = account.getCardNumber();
            String PIN = account.getPIN();

            String insertText = String.format("INSERT INTO card(number,pin) VALUES ('%s','%s');\n", cardNumber, PIN);

            try (Connection connection = dataSource.getConnection()) {
                try (PreparedStatement statement = connection.prepareStatement(insertText)) {
                    statement.execute();
                } catch (SQLException e) {
                    System.out.println("ERROR: Could not insert account");
                }
            } catch (SQLException e) {
                System.out.println("ERROR: Could not establish connection");
            }
        }

        public Account findAccount(String cardNumber, String PIN) {
            Account queriedAccount = null;
            String query = "SELECT * FROM card WHERE number = '" + cardNumber + "' AND pin = '" + PIN + "'";

            try (Connection connection = dataSource.getConnection()) {
                try (PreparedStatement statement = connection.prepareStatement(query)) {
                    try (ResultSet cardAccounts = statement.executeQuery()) {
                        while (cardAccounts.next()) {
                            String database_cardNumber = cardAccounts.getString("number");
                            double database_balance = cardAccounts.getInt("balance");
                            queriedAccount = new Account(database_cardNumber, database_balance);
                        }
                    } catch (SQLException e) {
                        System.out.println("ERROR: Invalid query");
                    }
                } catch (SQLException e) {
                    System.out.println("ERROR: Could not process statement");
                }
            } catch (SQLException e) {
                System.out.println("ERROR: Could not establish a connection");
            }
            return queriedAccount;
        }
    }
  learner_created: true
- name: src/banking/Account.java
  visible: true
  text: |
    package banking;

    public class Account {
        private final int bankIdentificationNumber;
        private final int accountID;
        private final int checksum;
        private final String cardNumber;

        private final double balance;
        private String PIN;

        public Account(int bankIdentificationNumber, int accountID) {
            this(bankIdentificationNumber, accountID, 0.0);
        }

        public Account(int bankIdentificationNumber, int accountID, double balance) {
            this.bankIdentificationNumber = bankIdentificationNumber;
            this.accountID = accountID;
            this.checksum = ChecksumCalculator.calculateChecksum(bankIdentificationNumber, accountID);
            this.balance = balance;
            cardNumber = cardNumberToString();
        }

        public Account(String cardNumber, double balance) {
            this.bankIdentificationNumber = Integer.parseInt(cardNumber.substring(0, 6));
            this.accountID = Integer.parseInt(cardNumber.substring(6, cardNumber.length() - 1));
            this.checksum = Integer.parseInt(cardNumber.substring(cardNumber.length() - 1));
            this.balance = balance;
            this.cardNumber = cardNumber;
        }

        private String cardNumberToString() {
            final int CARD_NUMBER_LENGTH = 16;
            StringBuilder cardNumber = new StringBuilder();
            cardNumber.append(bankIdentificationNumber).append(accountID).append(checksum);
            if (cardNumber.length() < CARD_NUMBER_LENGTH) {
                while (cardNumber.length() < CARD_NUMBER_LENGTH) {
                    //insert zeroes into front of accountID to space and format correctly
                    cardNumber.insert(6, 0);
                }
            }
            return cardNumber.toString();
        }

        public double getBalance() {
            return balance;
        }

        public void setPIN(String PIN) {
            this.PIN = PIN;
        }

        public String getPIN() {
            return PIN;
        }

        public String getCardNumber() {
            return cardNumber;
        }
    }
  learner_created: true
- name: src/banking/ChecksumCalculator.java
  visible: true
  text: |
    package banking;

    public class ChecksumCalculator {

        public static int calculateChecksum(int bankIdentificationNumber, int accountNumber) {
            final int CARD_NUMBER_LENGTH = 15;
            StringBuilder cardNumber = new StringBuilder();
            cardNumber.append(bankIdentificationNumber).append(accountNumber);
            while (cardNumber.length() < CARD_NUMBER_LENGTH) {
                cardNumber.insert(6, 0);
            }

            return calculateChecksum(cardNumber.toString());
        }

        public static int calculateChecksum(String cardNumber) {
            // last digit is not needed to calculate sum
            final int cardLength = 15;
            int[] digits = new int[cardLength];
            int total = 0;

            //transform string into integer array
            for (int i = 0; i < cardLength; i++) {
                digits[i] = Integer.parseInt(cardNumber.substring(i, i + 1));
            }

            //Luhn's Algorithm
            for (int i = 0; i < digits.length; i++) {
                if (i % 2 == 0) {
                    digits[i] *= 2;
                    if (digits[i] > 9) {
                        digits[i] -= 9;
                    }
                }
                total += digits[i];
            }

            total %= 10;
            total = (10 - total) % 10;
            return total;
        }
    }
  learner_created: true
- name: src/banking/BankProgram.java
  visible: true
  text: |
    package banking;


    import java.util.Random;
    import java.util.Scanner;

    public class BankProgram {
        private final Scanner scanner;
        private final int bankIdentificationNumber;
        private final DataBaseManager dataBaseManager;

        BankProgram(String url) {
            scanner = new Scanner(System.in);
            bankIdentificationNumber = 400000;
            dataBaseManager = new DataBaseManager(url);
        }

        public void mainMenu() {
            String userChoice = "";
            while (!userChoice.equals("0")) {
                printMainMenu();
                userChoice = scanner.nextLine().trim();
                switch (userChoice) {
                    case "1":
                        Account currentAccount = createAccount();
                        cardCreationMessage(currentAccount);
                        dataBaseManager.insertAccount(currentAccount);
                        break;
                    case "2":
                        getLogInCredentials();
                        break;
                    case "0":
                        System.out.print("\nBye!");
                        break;
                    default:
                        System.out.println("Invalid Choice");
                }
            }
            scanner.close();
        }

        private void printMainMenu() {
            System.out.println("1. Create an account\n" +
                               "2. Log into account\n" +
                               "0. Exit");
        }

        private void printAccountManagementMenu() {
            System.out.println("1. Balance\n" +
                               "2. Log out\n" +
                               "0. Exit");
        }

        private Account createAccount() {
            int accountID = new Random().nextInt(1000000000);
            Account newAccount = new Account(bankIdentificationNumber, accountID);
            newAccount.setPIN(generateRandomPIN());

            return newAccount;
        }

        private String generateRandomPIN() {
            Random random = new Random();

            return String.valueOf(random.nextInt(10)) +
                   random.nextInt(10) +
                   random.nextInt(10) +
                   random.nextInt(10);
        }

        private void cardCreationMessage(Account account) {
            System.out.println();
            System.out.println("Your card has been created");
            System.out.println("Your card number:");
            System.out.println(account.getCardNumber());
            System.out.println("Your card PIN:");
            System.out.println(account.getPIN());
            System.out.println();
        }

        private void getLogInCredentials() {
            String cardNumber;
            String PIN;

            System.out.println("Enter your card number:");
            cardNumber = scanner.nextLine();
            System.out.println("Enter your PIN:");
            PIN = scanner.nextLine();
            System.out.println();

            logInAccount(cardNumber, PIN);
        }

        private void logInAccount(String cardNumber, String PIN) {
            Account currentAccount = dataBaseManager.findAccount(cardNumber, PIN);

            if (currentAccount != null) {
                System.out.println("You have successfully logged in!\n");
                accountManagement(currentAccount);
            } else {
                System.out.println("Wrong card number or PIN!\n");
            }
        }

        private void accountManagement(Account currentAccount) {
            while (true) {
                printAccountManagementMenu();
                String userChoice = scanner.nextLine();
                switch (userChoice) {
                    case "1":
                        String balanceFormatted = String.format("%.2f", currentAccount.getBalance());
                        System.out.println("\nBalance: " + balanceFormatted + "\n");
                        break;
                    case "2":
                        System.out.println("\nYou have successfully logged out!\n");
                        return;
                    case "0":
                        System.out.print("\nBye!");
                        System.exit(0);
                    default:
                        System.out.println("Invalid Selection");
                }
            }
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/8428#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Sun, 22 May 2022 23:20:41 UTC
record: -1
